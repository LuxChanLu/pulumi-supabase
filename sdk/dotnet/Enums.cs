// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.ComponentModel;
using Pulumi;

namespace Pulumi.Supabase
{
    [EnumType]
    public readonly struct FunctionStatus : IEquatable<FunctionStatus>
    {
        private readonly string _value;

        private FunctionStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static FunctionStatus Active { get; } = new FunctionStatus("ACTIVE");
        public static FunctionStatus Removed { get; } = new FunctionStatus("REMOVED");
        public static FunctionStatus Throttled { get; } = new FunctionStatus("THROTTLED");

        public static bool operator ==(FunctionStatus left, FunctionStatus right) => left.Equals(right);
        public static bool operator !=(FunctionStatus left, FunctionStatus right) => !left.Equals(right);

        public static explicit operator string(FunctionStatus value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is FunctionStatus other && Equals(other);
        public bool Equals(FunctionStatus other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Plan : IEquatable<Plan>
    {
        private readonly string _value;

        private Plan(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Plan Free { get; } = new Plan("free");
        public static Plan Pro { get; } = new Plan("pro");

        public static bool operator ==(Plan left, Plan right) => left.Equals(right);
        public static bool operator !=(Plan left, Plan right) => !left.Equals(right);

        public static explicit operator string(Plan value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Plan other && Equals(other);
        public bool Equals(Plan other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }

    [EnumType]
    public readonly struct Region : IEquatable<Region>
    {
        private readonly string _value;

        private Region(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        public static Region UsEast1 { get; } = new Region("us-east-1");
        public static Region UsWest1 { get; } = new Region("us-west-1");
        public static Region ApSoutheast1 { get; } = new Region("ap-southeast-1");
        public static Region ApNortheast1 { get; } = new Region("ap-northeast-1");
        public static Region ApNortheast2 { get; } = new Region("ap-northeast-2");
        public static Region ApSoutheast2 { get; } = new Region("ap-southeast-2");
        public static Region EuWest1 { get; } = new Region("eu-west-1");
        public static Region EuWest2 { get; } = new Region("eu-west-2");
        public static Region EuCentral1 { get; } = new Region("eu-central-1");
        public static Region CaCentral1 { get; } = new Region("ca-central-1");
        public static Region ApSouth1 { get; } = new Region("ap-south-1");
        public static Region SaEast1 { get; } = new Region("sa-east-1");

        public static bool operator ==(Region left, Region right) => left.Equals(right);
        public static bool operator !=(Region left, Region right) => !left.Equals(right);

        public static explicit operator string(Region value) => value._value;

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object? obj) => obj is Region other && Equals(other);
        public bool Equals(Region other) => string.Equals(_value, other._value, StringComparison.Ordinal);

        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;

        public override string ToString() => _value;
    }
}

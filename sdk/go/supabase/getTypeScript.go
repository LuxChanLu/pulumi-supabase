// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package supabase

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func GetTypeScript(ctx *pulumi.Context, args *GetTypeScriptArgs, opts ...pulumi.InvokeOption) (*GetTypeScriptResult, error) {
	var rv GetTypeScriptResult
	err := ctx.Invoke("supabase:index:GetTypeScript", args.Defaults(), &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

type GetTypeScriptArgs struct {
	// Included schemas
	IncludedSchemas *string `pulumi:"includedSchemas"`
	// ID of the project
	ProjectId *string `pulumi:"projectId"`
}

// Defaults sets the appropriate defaults for GetTypeScriptArgs
func (val *GetTypeScriptArgs) Defaults() *GetTypeScriptArgs {
	if val == nil {
		return nil
	}
	tmp := *val
	if isZero(tmp.IncludedSchemas) {
		includedSchemas_ := ""
		tmp.IncludedSchemas = &includedSchemas_
	}
	return &tmp
}

type GetTypeScriptResult struct {
	// TypeScript types of the project
	Types string `pulumi:"types"`
}

func GetTypeScriptOutput(ctx *pulumi.Context, args GetTypeScriptOutputArgs, opts ...pulumi.InvokeOption) GetTypeScriptResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetTypeScriptResult, error) {
			args := v.(GetTypeScriptArgs)
			r, err := GetTypeScript(ctx, &args, opts...)
			var s GetTypeScriptResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetTypeScriptResultOutput)
}

type GetTypeScriptOutputArgs struct {
	// Included schemas
	IncludedSchemas pulumi.StringPtrInput `pulumi:"includedSchemas"`
	// ID of the project
	ProjectId pulumi.StringPtrInput `pulumi:"projectId"`
}

func (GetTypeScriptOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTypeScriptArgs)(nil)).Elem()
}

type GetTypeScriptResultOutput struct{ *pulumi.OutputState }

func (GetTypeScriptResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetTypeScriptResult)(nil)).Elem()
}

func (o GetTypeScriptResultOutput) ToGetTypeScriptResultOutput() GetTypeScriptResultOutput {
	return o
}

func (o GetTypeScriptResultOutput) ToGetTypeScriptResultOutputWithContext(ctx context.Context) GetTypeScriptResultOutput {
	return o
}

// TypeScript types of the project
func (o GetTypeScriptResultOutput) Types() pulumi.StringOutput {
	return o.ApplyT(func(v GetTypeScriptResult) string { return v.Types }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetTypeScriptResultOutput{})
}

// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs, enums } from "../types";
import * as utilities from "../utilities";

export class Project extends pulumi.CustomResource {
    /**
     * Get an existing Project resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Project {
        return new Project(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'supabase:organization:Project';

    /**
     * Returns true if the given object is an instance of Project.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Project {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Project.__pulumiType;
    }

    /**
     * Project creation date
     */
    public /*out*/ readonly created_at!: pulumi.Output<string>;
    /**
     * DB Hostname
     */
    public /*out*/ readonly dbHost!: pulumi.Output<string>;
    /**
     * DB Name
     */
    public /*out*/ readonly dbName!: pulumi.Output<string>;
    /**
     * DB Port for pooled connection
     */
    public /*out*/ readonly dbPoolingPort!: pulumi.Output<string>;
    /**
     * DB Port
     */
    public /*out*/ readonly dbPort!: pulumi.Output<string>;
    /**
     * DB Username
     */
    public /*out*/ readonly dbUsername!: pulumi.Output<string>;
    /**
     * Supabase endpoint for client
     */
    public /*out*/ readonly endpoint!: pulumi.Output<string>;
    /**
     * Name of the project
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Organization ID of the project
     */
    public readonly organization_id!: pulumi.Output<string>;
    /**
     * Region of the project
     */
    public readonly region!: pulumi.Output<enums.organization.Region>;

    /**
     * Create a Project resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectArgs, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.db_pass === undefined) && !opts.urn) {
                throw new Error("Missing required property 'db_pass'");
            }
            if ((!args || args.kps_enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kps_enabled'");
            }
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.organization_id === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organization_id'");
            }
            if ((!args || args.plan === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plan'");
            }
            if ((!args || args.region === undefined) && !opts.urn) {
                throw new Error("Missing required property 'region'");
            }
            resourceInputs["db_pass"] = args?.db_pass ? pulumi.secret(args.db_pass) : undefined;
            resourceInputs["kps_enabled"] = args ? args.kps_enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organization_id"] = args ? args.organization_id : undefined;
            resourceInputs["plan"] = args ? args.plan : undefined;
            resourceInputs["region"] = args ? args.region : undefined;
            resourceInputs["created_at"] = undefined /*out*/;
            resourceInputs["dbHost"] = undefined /*out*/;
            resourceInputs["dbName"] = undefined /*out*/;
            resourceInputs["dbPoolingPort"] = undefined /*out*/;
            resourceInputs["dbPort"] = undefined /*out*/;
            resourceInputs["dbUsername"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
        } else {
            resourceInputs["created_at"] = undefined /*out*/;
            resourceInputs["dbHost"] = undefined /*out*/;
            resourceInputs["dbName"] = undefined /*out*/;
            resourceInputs["dbPoolingPort"] = undefined /*out*/;
            resourceInputs["dbPort"] = undefined /*out*/;
            resourceInputs["dbUsername"] = undefined /*out*/;
            resourceInputs["endpoint"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["organization_id"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Project.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * The set of arguments for constructing a Project resource.
 */
export interface ProjectArgs {
    /**
     * Postgres password of the project
     */
    db_pass: pulumi.Input<string>;
    /**
     * KPS Enabled on the project
     */
    kps_enabled: pulumi.Input<boolean>;
    /**
     * Name of the project
     */
    name: pulumi.Input<string>;
    /**
     * Organization ID of the project
     */
    organization_id: pulumi.Input<string>;
    /**
     * Plan of the project
     */
    plan: pulumi.Input<enums.organization.Plan>;
    /**
     * Region of the project
     */
    region: pulumi.Input<enums.organization.Region>;
}

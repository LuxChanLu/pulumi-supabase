# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetTypeScriptResult',
    'AwaitableGetTypeScriptResult',
    'get_type_script',
    'get_type_script_output',
]

@pulumi.output_type
class GetTypeScriptResult:
    def __init__(__self__, types=None):
        if types and not isinstance(types, str):
            raise TypeError("Expected argument 'types' to be a str")
        pulumi.set(__self__, "types", types)

    @property
    @pulumi.getter
    def types(self) -> str:
        """
        TypeScript types of the project
        """
        return pulumi.get(self, "types")


class AwaitableGetTypeScriptResult(GetTypeScriptResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTypeScriptResult(
            types=self.types)


def get_type_script(project_id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetTypeScriptResult:
    """
    Use this data source to access information about an existing resource.

    :param str project_id: ID of the project
    """
    __args__ = dict()
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('supabase:project:GetTypeScript', __args__, opts=opts, typ=GetTypeScriptResult).value

    return AwaitableGetTypeScriptResult(
        types=__ret__.types)


@_utilities.lift_output_func(get_type_script)
def get_type_script_output(project_id: Optional[pulumi.Input[Optional[str]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetTypeScriptResult]:
    """
    Use this data source to access information about an existing resource.

    :param str project_id: ID of the project
    """
    ...
